Stored Procedures: 

DELIMITER //

CREATE PROCEDURE CourseEnrollmentStatistics()
BEGIN
    DECLARE totalEnrollments INT;
    DECLARE maxCourses INT;


    SELECT COUNT(*) INTO totalEnrollments FROM User;

    IF totalEnrollments > 100 THEN
        SET maxCourses = 15;
    ELSE
        SET maxCourses = 5;
    END IF;

  

    SELECT c.CourseId, c.Topic, Count(u.UserId) AS enrolledUsersCount
    FROM Courses c NATURAL JOIN User u
    GROUP BY c.CourseId ORDER BY enrolledUsersCount DESC
    LIMIT maxCourses;

END//

DELIMITER ;


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


DELIMITER //

CREATE PROCEDURE GetAvgDifficulty()
BEGIN
   
    DECLARE topic_count INT;

 
    SELECT Count(Distinct C.Topic) INTO topic_count FROM Courses C Natural Join Problems P;

    IF topic_count > 0 THEN
        SELECT C.Topic, AVG(P.Difficulty) AS AvgDifficulty
        FROM Courses C Natural Join Problems P
        Group BY C.Topic Order By AvgDifficulty Desc;
    END IF;
END //

DELIMITER ;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Constraints: 

CREATE TABLE User (
    UserId INT  PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
    CourseId INT,
    FOREIGN KEY (CourseId) REFERENCES Courses(CourseId)
);

CREATE TABLE Courses (
    CourseId INT PRIMARY KEY,
    Topic VARCHAR(100) NOT NULL
);

CREATE TABLE Tutor (
    TutorId INT PRIMARY KEY,
    Topic VARCHAR(100) NOT NULL
);

CREATE TABLE Problems (
    ProblemId INT PRIMARY KEY,
    Questions VARCHAR(250) PRIMARY KEY,
    Answer VARCHAR(250) NOT NULL,
    Difficulty INT,
    Topic VARCHAR(100) NOT NULL
);

CREATE TABLE Info (
    InfoID INT PRIMARY KEY ,
    Topic varchar(100) NOT NULL,
    WebURL varchar(250),
    ResourceType varchar(50)
);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Triggers:

BEGIN
    UPDATE Problems
    SET Difficulty = 
        CASE 
            WHEN NEW.CorrectAnswers > OLD.CorrectAnswers 
                THEN GREATEST(Difficulty - 1, 1)
            ELSE LEAST(Difficulty + 1, 10)
        END
    WHERE Question = NEW.LastQuestion;  
END

BEGIN
    UPDATE Info
    SET RecommendationCount = RecommendationCount + 1
    ORDER BY RAND()
    LIMIT 3;
END

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Transactions:

START TRANSACTION;
// Assign the first available tutor to the user
UPDATE Tutor
SET CurrentUserId = ?
WHERE TutorId = (
    SELECT TutorId 
    FROM (
        SELECT T.TutorId
        FROM Tutor T
        JOIN Courses C ON T.Topic = C.Topic
        JOIN User U ON U.CourseId = C.CourseId
        WHERE U.UserId = ?
        AND T.CurrentUserId IS NULL
        LIMIT 1
    ) AS SubQuery
);

COMMIT;

ROLLBACK;


START TRANSACTION;

// Get tutor information and problem counts
SELECT T.TutorId, T.Topic, COUNT(P.ProblemId) AS TotalProblems
FROM Tutor T
JOIN Courses C ON T.Topic = C.Topic
JOIN Problems P ON P.Topic = C.Topic
JOIN User U ON U.CourseId = C.CourseId
WHERE U.UserId = ?
GROUP BY T.TutorId, T.Topic
FOR UPDATE;

COMMIT;

ROLLBACK;

UPDATE Tutor
SET CurrentUserId = NULL
WHERE CurrentUserId = ?;


START TRANSACTION;

// Check if a tutor is available for the given topic
SELECT T.TutorId, T.Topic, T.IsAvailable
FROM Tutor T
WHERE T.Topic = ?
AND T.IsAvailable = 1
FOR UPDATE;

// Update tutor availability and assign user if available
UPDATE Tutor
SET IsAvailable = 0, CurrentUserId = ?
WHERE Topic = ?;

COMMIT;

ROLLBACK;